name: "Terraform check action"
description: "Check terraform code"
author: "HENNGE"
branding:
  icon: check-square
  color: white
inputs:
  directory:
    description: "One or more directories separated by space in which to run the checks"
    required: true
  terraform_version:
    description: "Terraform version to run the check against. Set to 'system' to use the system terraform."
    default: "latest"
  post_comment:
    description: "Post check result to PR comment if set as true"
  hide_refresh:
    description: "Hide state refresh output from report"
  github_token:
    description: "Github token to post PR comment"
  issue_number:
    description: "Post comment to a specific issue or PR instead of the current one"
outputs:
  returncode:
    description: "Terraform check return code"
    value: ${{ steps.check.outputs.returncode }}
  result:
    description: "Terraform check result"
    value: ${{ steps.result.outputs.result }}
  report:
    description: "Terraform check detailed report"
    value: ${{ steps.result.outputs.report }}
runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Setup tfenv
      if: "${{ inputs.terraform_version != 'system' }}"
      run: |
        if [[ ! -d ~/.tfenv ]]; then
          git clone -b v3.0.0 https://github.com/tfutils/tfenv.git ~/.tfenv
        fi
        sudo ln -sf ~/.tfenv/bin/* /usr/local/bin
      shell: bash

    - run: |
        python -m venv venv
        venv/bin/pip install jinja2
      shell: bash

    - id: check
      run: |
        set +e
        read -r -a directories <<< "${{ inputs.directory }}"
        read -r -a versions <<< "${{ inputs.terraform_version }}"

        if [ "${{ inputs.hide_refresh }}" = "true" ]; then
          hide=-hide-refresh
        fi

        len=${#directories[@]}

        returncode=0
        for (( i=0; i<len; i++)); do
          # Append three dashes between reports
          if [ "$i" -gt 0 ]; then
            printf "\n\n---\n\n" >> report.md
          fi

          if [ "${versions[$i]}" = "system" ] ; then
            echo "Using system provided terraform"
            terraform --version
          elif [ -z "${versions[$i]}" ] ; then
            : # using whatever we setup previously
          else
            # Change Terraform version
            tfenv install "${versions[$i]}"
            tfenv use "${versions[$i]}"
          fi

          venv/bin/python "${{ github.action_path }}/tfcheck.py" "${directories[$i]}" -report report.md $hide | tee >(tail -1 >> result.txt)
          ret=${PIPESTATUS[0]}

          if [ "$ret" -eq 1 ]; then
            echo "::error ::$(tail -1 result.txt)"
          elif [ "$ret" -eq 2 ]; then
            echo "::warning ::$(tail -1 result.txt)"
          fi

          # Set exitcode to 1 if any check failed
          # Set exitcode to 2 if any check contains plan change
          if [ "$returncode" -eq 0 ]; then
            returncode=$ret
          elif [ "$returncode" -eq 2 ]; then
            if [ "$ret" -eq 1 ]; then
              returncode=1
            else
              returncode=2
            fi
          fi
        done

        echo "returncode=$returncode" >> $GITHUB_OUTPUT
      shell: bash

    - id: result
      run: |
        delimiter="$(openssl rand -hex 8)"

        echo "result<<$delimiter" >> $GITHUB_OUTPUT
        echo "$(cat result.txt)" >> $GITHUB_OUTPUT
        echo "$delimiter" >> $GITHUB_OUTPUT

        echo "report<<$delimiter" >> $GITHUB_OUTPUT
        echo "$(cat report.md)" >> $GITHUB_OUTPUT
        echo "$delimiter" >> $GITHUB_OUTPUT

        echo "$(cat report.md)" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - uses: actions/github-script@v6
      if: ${{ inputs.post_comment == 'true' || ( inputs.post_comment == 'nonzero' && steps.check.outputs.returncode != 0 ) }}
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs')
          const body = fs.readFileSync("report.md", "utf8")

          const issue_number = Number('${{ inputs.issue_number }}') || context.issue.number

          github.rest.issues.createComment({
            issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })

    - run: |
        if [[ ${{ steps.check.outputs.returncode }} -eq 1 ]]; then
          exit 1
        fi
      shell: bash
